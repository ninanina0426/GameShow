#include "DxLib.h"//DXライブラリの使用する
#include <time.h>
#include "Stage.h"


int STAGE_YUKA[MAP_Y][MAP_X] = {
	{19,19,19,19,19,19,19,19, 19,19,19,19,19, 19,19,19,19,19, 19,19,},
	{19,19,19,19,19,19,19,19, 19,19,19,19,19, 19,19,19,19,19, 19,19,},
	{19,19,19,19,19,19,19,19, 19,19,19,19,19, 19,19,19,19,19, 19,19,},
	{19,19,19,19,19,19,19,19, 19,19,19,19,19, 19,19,19,19,19, 19,19,},
	{19,19,19,19,19,19,19,19, 19,19,19,19,19, 19,19,19,19,19, 19,19,},
	{19,19,19,19,19,19,19,19, 19,19,19,19,19, 19,19,19,19,19, 19,19,},
	{19,19,19,19,19,19,19,19, 19,19,19,19,249, 250,19,19,19, 19,19,19},
	{19,19,19,19,19,19,19,19, 19,19,267,268,269, 270,271,272,273,274, 275,19},
	{19,19,19,19,19,19,283,284, 285,286,287,288,289, 290,291,292,293,294, 295,19},
	{19,19,19,300,301,302,303,304, 305,306,307,308,309, 310,311,312,313,314, 19,19},
	{19,19,19,320,321,322,323,324, 325,326,327,328,329, 330,331,332,333,19, 19,19},
	{19,19,19,340,341,342,343,344, 345,346,347,348,349, 350,351,19,19,19, 19,19},
	{19,19,19,360,361,362,363,364, 365,366,367,368,369, 370,19,19,19,19, 19,19},
	{19,19,19,380,381,382,383,384, 385,386,387,19,19, 19,19,19,19,19, 19,19},
	{19,19,19,19,19,19,19,19, 19,19,19,19,19, 19,19,19,19,19, 19,19,},
	
	
};

int STAGE_KABE[MAP_Y][MAP_X] = {

	{19,19,19,19, 19,19,19,19,19, 19,19,19,19,19, 19,19,19, 19,19,19},
	{19,19,19,19, 19,19,19,19,19, 19,19,19,19,19, 19,19,19, 19,19,19},
	{19,19,19,19,19,19,19,19, 19,19,19,19,429,620,621,19,19,19,19,19 },
	{19,19,19,19,19,19,19,19,19,19, 447,448,449,640,641, 642,643,19,19,19},
	{19,19,19,19,19,19,19,19, 465,466,467,468,469,660,661,662,663,664,665,19},
	{19,19,19,19,19,19,483,484, 485,486,487,488,489,680,681,682,683,684,685,19},
	{19,19,19,500,501,502,503,504, 505,506,507,508,509,700,701,702,703,704,705,19},
	{19,19,19,520,521,522,523,524,525,526,527,19,19,19,19,722,723,724,19,19,},
	{19,19,19,540,541,542,543,544,545,19,19,19,19,19,19,19,19,744,745,19, },
	{19,19,19,560,561,562,563,19,19,19, 19,19,19,19,19, 19,19,19,19,19},
	{19,19,19,580,581,19,19,19,19,19,19, 19,19,19,19,19, 19,19,19,19},
	{19,19,19,19,19,19,19, 19,19,19,19,19, 19,19,19,19,19, 19,19,19},
	{19,19,19,19,19,19,19, 19,19,19,19,19, 19,19,19,19,19, 19,19,19},
	{19,19,19,19,19,19,19, 19,19,19,19,19, 19,19,19,19,19, 19,19,19},
	{19,19,19,19,19,19,19, 19,19,19,19,19, 19,19,19,19,19, 19,19,19},
	
};

int STAGE_KAGU[MAP_Y][MAP_X] = {
    
	{19,19,19,19,19,   19,19,19,19,19,     19,19,19,19,19,        19,19,19,19,19,},
	{19,19,19,19,19,   19,19,19,19,19,     19,19,19,19,19,        19,19,19,19,19,},
	{19,19,19,19,19,   19,19,19,19,19,     19,19,19,19,19,        19,19,19,19,19,},
	{19,19,19,19,19,   19,19,19,19,19,     19,19,19,19,19,        19,19,19,19,19,},
	{19,19,19,19,19,19,   19,19,19,19,19,     19,19,514,515,19,    19,19,19,19},
	{19,19,19,19,19,19,   19,19,529,530,531,     532,533,534,535,536,    537,538,19,19,},
	{19,19,19,19,19,546,   547,548,549,550,551,     552,553,554,555,556,    557,558,19,19,},
	{19,19,19,19,565,566,   567,568,569,570,571,     572,573,574,575,576,    577,578,19,19,},
	{19,19,19,19,585,586,   587,588,589,590,591,     592,593,594,595,596,    597,598,19,19,},
	{19,19,19,19,605,606,   607,608,609,610,611,     612,613,614,615,616,    617,618,19,19,},
	{19,19,19,19,625,626,   627,628,629,630,631,     632,633,634,635,636,    637,638,19,19,},
	{19,19,19,19,645,646,   647,648,649,650,651,     652,653,654,655,656,    657,658,19,19,},
	{19,19,19,19,665,666,   667,668,669,670,671,     672,673,674,675,676,    677,678,19,19,},
	{19,19,19,19,19,   19,19,19,19,19,      19,19,19,19,19,       19,19,19,19,19,},
	{19,19,19,19,19,19,   19,19,19,19,19,      19,19,19,19,19,       19,19,19,19,},
	
};



bool Stage::Init(void)
{
	mOffset.x_ = 0;
	mOffset.y_ = 0;


	SetMap();

	LoadDivGraph("image/stage.png", CHIP_CNT_MAX, CHIP_X_MAX, CHIP_Y_MAX, 32, 32, &mChipImage[0]);

	mFadeOut = false;
	mFadeIn = true;

	return true;
}

Vector2 Stage::Update(Vector2 mPlayerset)
{
	return mOffset;
}

void Stage::Draw(void)
{

	for (int y = 0; y < MAP_Y; y++)
	{
		for (int x = 0; x < MAP_X; x++)
		{

			DrawGraph(x * CHIP_SIZE_X - mOffset.x_, y * CHIP_SIZE_Y - mOffset.y_, mChipImage[mMap[y][x]], true);

		}
	}
	for (int y = 0; y < MAP_Y; y++)
	{
		for (int x = 0; x < MAP_X; x++)
		{

			DrawGraph(x * CHIP_SIZE_X - mOffset.x_, y * CHIP_SIZE_Y - mOffset.y_, mChipImage[mMapYuka[y][x]], true);
			/*DrawFormatString(32 * x - mOffset.X, 32 * y - mOffset.Y, GetColor(255, 255, 255), "%d", mMapYuka[y][x]);*/
		}
	}
	for (int y = 0; y < MAP_Y; y++)
	{
		for (int x = 0; x < MAP_X; x++)
		{

			DrawGraph(x * CHIP_SIZE_X - mOffset.x_, y * CHIP_SIZE_Y - mOffset.y_, mChipImage[mMapKagu[y][x]], true);
			/*DrawFormatString(32 * x - mOffset.X, 32 * y - mOffset.Y, GetColor(255, 255, 255), "%d", mMapYuka[y][x]);*/
		}
	}

	

}

bool Stage::Release(void)
{
	for (int i = 0; i < CHIP_CNT_MAX; i++)
	{
		DeleteGraph(mChipImage[i]);
	}

	return true;
}

int Stage::GetMapChip(Vector2 Pos)
{
	return mMapYuka[Pos.y_ / 32][Pos.x_ / 32];
}

void Stage::SetMap(void)
{
	//床
	for (int y = 0; y < MAP_Y; y++)
	{
		for (int x = 0; x < MAP_X; x++)
		{
			mMapYuka[y][x] = STAGE_YUKA[y][x];

			mMapKagu[y][x] = STAGE_KAGU[y][x];

			mMap[y][x] = STAGE_KABE[y][x];
		}
	}


}

void Stage::subInit(void)
{
}
